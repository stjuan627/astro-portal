---
interface Props {
  gameUrl: string;
  title?: string;
  coverImage?: string;
  description?: string;
}

const { 
  gameUrl, 
  title = 'Game Title', 
  coverImage = '',
  description = 'Game Description'
} = Astro.props;

console.debug('[GameFrame] Initializing:', { gameUrl, title });
---

<div class="w-full bg-base-200 rounded-lg overflow-hidden">
  <div class="aspect-[16/9] relative" id="game-container">
    <!-- Background Image -->
    <img 
      src={coverImage} 
      alt={title}
      class="absolute inset-0 w-full h-full object-cover"
    />
    
    <!-- Facade -->
    <div class="absolute inset-0 flex items-center justify-center facade-content">
      <div class="text-center max-w-2xl px-4 z-10">
        <h1 class="text-3xl lg:text-5xl font-bold text-white mb-4">{title}</h1>
        <p class="py-6 text-white/90">{description}</p>
        <button 
          class="btn btn-lg start-game-btn rounded-full text-white/80 hover:text-white bg-gradient-to-r from-primary to-secondary hover:from-primary/80 hover:to-secondary/80 border-0 animate-pulse-slow shadow-lg shadow-primary/50 hover:shadow-xl hover:shadow-primary/60 transition-all duration-300 hover:scale-105 relative group"
          onclick="window.startGame()"
        >
          <span class="flex items-center gap-2">
            开始游戏
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </span>
        </button>
      </div>
    </div>

    <!-- 修改加载动画部分 -->
    <div id="loading-spinner" class="hidden absolute inset-0 flex items-center justify-center z-20">
      <!-- 背景遮罩 -->
      <div class="absolute inset-0 bg-black/80 backdrop-blur-sm"></div>
      <!-- 加载动画内容 -->
      <div class="relative flex flex-col items-center">
        <div class="loading loading-spinner text-primary w-32 h-32"></div>
        <p class="mt-6 text-white/90 text-xl font-medium">游戏加载中...</p>
      </div>
    </div>

    <!-- Game iframe (hidden by default) -->
    <iframe
      class="absolute inset-0 w-full h-full hidden"
      title={title}
      allow="fullscreen; autoplay; clipboard-write"
      loading="lazy"
      onload="window.handleGameLoaded()"
    />
  </div>
</div>

<script define:vars={{ gameUrl }}>
// 游戏加载状态管理
let isGameLoaded = false;

window.startGame = () => {
  if (isGameLoaded) return;
  
  console.debug('[GameFrame] Starting game:', gameUrl);
  
  const container = document.getElementById('game-container');
  const iframe = container.querySelector('iframe');
  const facade = container.querySelector('.facade-content');
  const spinner = container.querySelector('#loading-spinner');
  
  // 显示加载动画
  spinner.classList.remove('hidden');
  
  // 设置游戏URL并显示iframe
  iframe.src = gameUrl;
  iframe.classList.remove('hidden');
  
  // 淡出facade
  facade.style.opacity = '0';
  facade.style.pointerEvents = 'none';
};

// 处理iframe加载完成
window.handleGameLoaded = () => {
  if (!isGameLoaded) {
    console.debug('[GameFrame] Game loaded');
    const container = document.getElementById('game-container');
    const spinner = container.querySelector('#loading-spinner');
    
    // 隐藏加载动画
    spinner.classList.add('hidden');
    
    // 标记游戏已加载
    isGameLoaded = true;
  }
};
</script>

<style>
.facade-content {
  transition: opacity 0.3s ease-out;
  background: rgba(0, 0, 0, 0.75);
}

.start-game-btn::before,
.start-game-btn::after {
  content: "";
  position: absolute;
  inset: -4px;
  border-radius: 9999px;
  background: linear-gradient(45deg, var(--p) 0%, var(--s) 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: -1;
}

.start-game-btn::after {
  filter: blur(12px);
}

.start-game-btn:hover::before,
.start-game-btn:hover::after {
  opacity: 0.5;
}

.loading-spinner {
  transition: opacity 0.3s ease;
}

.loading-spinner-inner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
</style> 